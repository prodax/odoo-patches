diff --git a/addons/purchase/purchase.py b/addons/purchase/purchase.py
index d28a14b..cd0fa47 100644
--- a/addons/purchase/purchase.py
+++ b/addons/purchase/purchase.py
@@ -19,6 +19,7 @@
 #
 ##############################################################################
 
+import logging
 import pytz
 from openerp import SUPERUSER_ID, workflow
 from datetime import datetime
@@ -32,6 +33,8 @@ from openerp.osv.orm import browse_record_list, browse_record, browse_null
 from openerp.tools import DEFAULT_SERVER_DATE_FORMAT, DEFAULT_SERVER_DATETIME_FORMAT, DATETIME_FORMATS_MAP
 from openerp.tools.float_utils import float_compare
 
+_logger = logging.getLogger(__name__)
+
 class purchase_order(osv.osv):
 
     def _amount_all(self, cr, uid, ids, field_name, arg, context=None):
@@ -42,9 +45,12 @@ class purchase_order(osv.osv):
             res[order.id] = {
                 'amount_untaxed': 0.0,
                 'amount_tax': 0.0,
+                'amount_tax_credit': 0.0,
+                'amount_tax_payable': 0.0,
+                'amount_tax_advpayable': 0.0,
                 'amount_total': 0.0,
             }
-            val = val1 = 0.0
+            val1 = val_credit = val_payable = val_tax_advpayable = 0.0
             cur = order.pricelist_id.currency_id
             for line in order.order_line:
                 val1 += line.price_subtotal
@@ -55,8 +61,15 @@ class purchase_order(osv.osv):
                 for c in self.pool['account.tax'].compute_all(
                         cr, uid, line.taxes_id, line_price, line_qty,
                         line.product_id, order.partner_id)['taxes']:
-                    val += c.get('amount', 0.0)
-            res[order.id]['amount_tax']=cur_obj.round(cr, uid, cur, val)
+                    val_credit += c.get('amount', 0.0)*c.get('tax_parent_sign', 0.0) if c.get('tax_credit_payable') == 'taxcredit' else 0.0
+                    val_payable += c.get('amount', 0.0)*c.get('tax_parent_sign', 0.0) if c.get('tax_credit_payable') == 'taxpay' else 0.0
+                    val_tax_advpayable += c.get('amount', 0.0)*c.get('tax_parent_sign', 0.0) if c.get('tax_credit_payable') == 'taxadvpay' else 0.0
+#                    val += c.get('amount', 0.0)*c.get('tax_parent_sign', 0.0)
+            _logger.info("Taxeses taxcredit: %s, taxpay: %s, taxadvpay: %s total: %s" % (val_credit, val_payable, val_tax_advpayable, val_credit + val_payable))
+            res[order.id]['amount_tax']=cur_obj.round(cr, uid, cur, val_credit + val_payable)
+            res[order.id]['amount_tax_credit']=cur_obj.round(cr, uid, cur, val_credit)
+            res[order.id]['amount_tax_payable']=cur_obj.round(cr, uid, cur, val_payable)
+            res[order.id]['amount_tax_advpayable']=cur_obj.round(cr, uid, cur, val_tax_advpayable)
             res[order.id]['amount_untaxed']=cur_obj.round(cr, uid, cur, val1)
             res[order.id]['amount_total']=res[order.id]['amount_untaxed'] + res[order.id]['amount_tax']
         return res
@@ -300,6 +313,18 @@ class purchase_order(osv.osv):
             store={
                 'purchase.order.line': (_get_order, None, 10),
             }, multi="sums", help="The tax amount"),
+        'amount_tax_credit': fields.function(_amount_all, digits_compute=dp.get_precision('Account'), string='Tax credit',
+            store={
+                'purchase.order.line': (_get_order, None, 10),
+            }, multi="sums", help="The tax credit amount"),
+        'amount_tax_payable': fields.function(_amount_all, digits_compute=dp.get_precision('Account'), string='Tax payable',
+            store={
+                'purchase.order.line': (_get_order, None, 10),
+            }, multi="sums", help="The tax payable amount"),
+        'amount_tax_advpayable': fields.function(_amount_all, digits_compute=dp.get_precision('Account'), string='Tax payable',
+            store={
+                'purchase.order.line': (_get_order, None, 10),
+            }, multi="sums", help="The tax payable amount"),
         'amount_total': fields.function(_amount_all, digits_compute=dp.get_precision('Account'), string='Total',
             store={
                 'purchase.order.line': (_get_order, None, 10),